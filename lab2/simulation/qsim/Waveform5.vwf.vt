// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/21/2020 00:13:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg DATAIN1;
reg DATAIN2;
reg DATAOUT1;
reg DATAOUT2;
reg Select1;
reg Select2;
// wires                                               
wire Q1;
wire Q2;

// assign statements (if any)                          
Block3 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DATAIN1(DATAIN1),
	.DATAIN2(DATAIN2),
	.DATAOUT1(DATAOUT1),
	.DATAOUT2(DATAOUT2),
	.Q1(Q1),
	.Q2(Q2),
	.Select1(Select1),
	.Select2(Select2)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// Select1
initial
begin
	Select1 = 1'b0;
	Select1 = #210000 1'b1;
	Select1 = #210000 1'b0;
end 

// Select2
initial
begin
	Select2 = 1'b0;
	Select2 = #420000 1'b1;
	Select2 = #160000 1'b0;
end 

// DATAOUT1
initial
begin
	DATAOUT1 = 1'b1;
	DATAOUT1 = #50000 1'b0;
	DATAOUT1 = #300000 1'b1;
	DATAOUT1 = #50000 1'b0;
end 

// DATAOUT2
initial
begin
	DATAOUT2 = 1'b0;
	DATAOUT2 = #60000 1'b1;
	DATAOUT2 = #40000 1'b0;
	DATAOUT2 = #210000 1'b1;
	DATAOUT2 = #50000 1'b0;
	DATAOUT2 = #120000 1'b1;
	DATAOUT2 = #30000 1'b0;
	DATAOUT2 = #30000 1'b1;
	DATAOUT2 = #20000 1'b0;
end 

// DATAIN1
initial
begin
	DATAIN1 = 1'b0;
	DATAIN1 = #100000 1'b1;
	DATAIN1 = #30000 1'b0;
	DATAIN1 = #130000 1'b1;
	DATAIN1 = #40000 1'b0;
	DATAIN1 = #70000 1'b1;
	DATAIN1 = #40000 1'b0;
	DATAIN1 = #70000 1'b1;
	DATAIN1 = #30000 1'b0;
end 

// DATAIN2
initial
begin
	DATAIN2 = 1'b0;
	DATAIN2 = #160000 1'b1;
	DATAIN2 = #30000 1'b0;
	DATAIN2 = #20000 1'b1;
	DATAIN2 = #50000 1'b0;
	DATAIN2 = #240000 1'b1;
	DATAIN2 = #30000 1'b0;
end 
endmodule


// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/20/2020 02:39:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          redesign
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module redesign_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg [15:0] BUS1;
reg [15:0] BUS2;
reg C;
// wires                                               
wire DELAY;
wire NEG_B;
wire Z;

// assign statements (if any)                          
redesign i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.BUS1(BUS1),
	.BUS2(BUS2),
	.C(C),
	.DELAY(DELAY),
	.NEG_B(NEG_B),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 

// A
initial
begin
	A = 1'b1;
end 

// B
always
begin
	B = 1'b0;
	B = #50000 1'b1;
	#50000;
end 

// C
initial
begin
	C = 1'b1;
end 
// BUS1[ 15 ]
initial
begin
	BUS1[15] = 1'b1;
end 
// BUS1[ 14 ]
initial
begin
	BUS1[14] = 1'b1;
end 
// BUS1[ 13 ]
initial
begin
	BUS1[13] = 1'b1;
end 
// BUS1[ 12 ]
initial
begin
	BUS1[12] = 1'b1;
end 
// BUS1[ 11 ]
initial
begin
	BUS1[11] = 1'b1;
end 
// BUS1[ 10 ]
initial
begin
	BUS1[10] = 1'b1;
end 
// BUS1[ 9 ]
initial
begin
	BUS1[9] = 1'b1;
end 
// BUS1[ 8 ]
initial
begin
	BUS1[8] = 1'b1;
end 
// BUS1[ 7 ]
initial
begin
	BUS1[7] = 1'b1;
end 
// BUS1[ 6 ]
initial
begin
	BUS1[6] = 1'b1;
end 
// BUS1[ 5 ]
initial
begin
	BUS1[5] = 1'b1;
end 
// BUS1[ 4 ]
initial
begin
	BUS1[4] = 1'b1;
end 
// BUS1[ 3 ]
initial
begin
	BUS1[3] = 1'b1;
end 
// BUS1[ 2 ]
initial
begin
	BUS1[2] = 1'b1;
end 
// BUS1[ 1 ]
initial
begin
	BUS1[1] = 1'b1;
end 
// BUS1[ 0 ]
initial
begin
	BUS1[0] = 1'b1;
end 
// BUS2[ 15 ]
initial
begin
	BUS2[15] = 1'b0;
end 
// BUS2[ 14 ]
initial
begin
	BUS2[14] = 1'b0;
end 
// BUS2[ 13 ]
initial
begin
	BUS2[13] = 1'b0;
end 
// BUS2[ 12 ]
initial
begin
	BUS2[12] = 1'b0;
end 
// BUS2[ 11 ]
initial
begin
	BUS2[11] = 1'b0;
end 
// BUS2[ 10 ]
initial
begin
	BUS2[10] = 1'b0;
end 
// BUS2[ 9 ]
initial
begin
	BUS2[9] = 1'b0;
end 
// BUS2[ 8 ]
initial
begin
	BUS2[8] = 1'b0;
end 
// BUS2[ 7 ]
initial
begin
	BUS2[7] = 1'b0;
end 
// BUS2[ 6 ]
initial
begin
	BUS2[6] = 1'b0;
end 
// BUS2[ 5 ]
initial
begin
	BUS2[5] = 1'b0;
end 
// BUS2[ 4 ]
initial
begin
	BUS2[4] = 1'b0;
end 
// BUS2[ 3 ]
initial
begin
	BUS2[3] = 1'b0;
end 
// BUS2[ 2 ]
initial
begin
	BUS2[2] = 1'b0;
end 
// BUS2[ 1 ]
initial
begin
	BUS2[1] = 1'b0;
end 
// BUS2[ 0 ]
initial
begin
	BUS2[0] = 1'b0;
end 
endmodule


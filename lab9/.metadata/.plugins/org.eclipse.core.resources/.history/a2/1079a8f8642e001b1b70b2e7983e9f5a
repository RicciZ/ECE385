/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000100;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}

void RotWord(unsigned char * in)
{
    unsigned char temp = in[0];
    in[0] = in[1];
    in[1] = in[2];
    in[2] = in[3];
    in[3] = temp;
}

void SubWord(unsigned char * in)
{
    for (int i = 0; i < 4; i++)
    {
        in[i] = aes_sbox[in[i]];
    }
}

void KeyExpansion(unsigned char * key, unsigned char * KeySchedule)
{
    for (int i = 0;i < 16;i++)
    {
        KeySchedule[i] = key[i];
    }
    unsigned char prevword[4];
    for (int row = 1; row < 11; row++)
    {
        for (int j = 0; j < 4; j++)
        {
            prevword[j] = KeySchedule[row*16-13+j*4];
        }
        RotWord(prevword);
        SubWord(prevword);
        prevword[0] ^= Rcon[row] >> 24;
        for (int k = 0; k < 4; k++)
        {
            KeySchedule[row*16+k*4] = KeySchedule[row*16+k*4-16]^prevword[k];
            prevword[k] = KeySchedule[row*16+k*4];
        }

        int first = row*16;
        for (int i = 0; i < 3; i++)
        {
            first++;
            for (int k = 0; k < 4; k++)
            {
                KeySchedule[first+k*4] = KeySchedule[first+k*4-16]^prevword[k];
                prevword[k] = KeySchedule[first+k*4];
            }
        }
    }

}

void AddRoundKey(unsigned char *state, unsigned char *key)
{
    for (int i = 0; i < 16; i++)
    {
        state[i] ^= key[i];
    }
}

void SubBytes(unsigned char *state)
{
    for (int i = 0; i < 16; i++)
    {
        state[i] = aes_sbox[state[i]];
    }
}

void ShiftRows(unsigned char *in)
{
    unsigned char temp[16];
    temp[0] = in[0];
    temp[1] = in[1];
    temp[2] = in[2];
    temp[3] = in[3];

    temp[4] = in[5];
    temp[5] = in[6];
    temp[6] = in[7];
    temp[7] = in[4];

    temp[8] = in[10];
    temp[9] = in[11];
    temp[10] = in[8];
    temp[11] = in[9];

    temp[12] = in[15];
    temp[13] = in[12];
    temp[14] = in[13];
    temp[15] = in[14];

    for (int i = 0; i < 16; i++)
    {
        in[i] = temp[i];
    }
}

void MixColumns(unsigned char * in)
{
    unsigned char temp[4];
    for (int i = 0; i < 4; i++)
    {
        int a = i+0;
        int b = i+4;
        int c = i+8;
        int d = i+12;

        temp[0] = gf_mul[in[a]][0] ^ gf_mul[in[b]][1] ^ in[c] ^ in[d];
        temp[1] = in[a] ^ gf_mul[in[b]][0] ^ gf_mul[in[c]][1] ^ in[d];
        temp[2] = in[a] ^ in[b] ^ gf_mul[in[c]][0] ^ gf_mul[in[d]][1];
        temp[3] = gf_mul[in[a]][1] ^ in[b] ^ in[c] ^ gf_mul[in[d]][0];

        in[a] = temp[0];
        in[b] = temp[1];
        in[c] = temp[2];
        in[d] = temp[3];
    }
}



/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char *msg_ascii, unsigned char *key_ascii, unsigned int *msg_enc, unsigned int *key)
{
    unsigned char state[16];
    unsigned char key_hex[16];
    for (int i = 0; i < 16; i++)
    {
        state[i] = charsToHex(msg_ascii[i * 2], msg_ascii[i * 2 + 1]);
        key_hex[i] = charsToHex(key_ascii[i * 2], key_ascii[i * 2 + 1]);
    }
    unsigned char KeySchedule[176];
    KeyExpansion(key_hex,KeySchedule);
    AddRoundKey(state,key_hex);
    for (int i = 1; i < 10; i++)
    {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(state,KeySchedule+(16*i));
    }
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state,KeySchedule+160);
}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}

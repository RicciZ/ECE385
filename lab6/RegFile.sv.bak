module Reg_File #(N = 16) (
		input logic [2:0] SR1, SR2, DR,
		input logic [N-1:0] BUS,
		input logic Clk, Reset, LD_REG,
		output logic [N-1:0] SR1OUT,SR2OUT		
		);
		
	logic [7:0][N-1:0] Data;
		
   always_ff @ (posedge Clk)
   begin
		if (Reset) //notice, this is a sycnrhonous reset, which is recommended on the FPGA
			Data[0] <= 16'h0;
			Data[1] <= 16'h0;
			Data[2] <= 16'h0;
			Data[3] <= 16'h0;
			Data[4] <= 16'h0;
			Data[5] <= 16'h0;
			Data[6] <= 16'h0;
			Data[7] <= 16'h0;
		else if (LD_REG)
			unique case (DR)
			3'b000:		Data[0]<=BUS;
			3'b001:		Data[1]<=BUS;
			3'b010:		Data[2]<=BUS;
			3'b011:		Data[3]<=BUS;
			3'b100:		Data[4]<=BUS;
			3'b101:		Data[5]<=BUS;
			3'b110:		Data[6]<=BUS;
			3'b111:		Data[7]<=BUS;
			endcase
	end
	
	always_comb
	begin
		unique case (SR1)
			3'b000:			SR1OUT = Out[0];
			3'b001:			SR1OUT = Out[1];
			3'b010:			SR1OUT = Out[2];
			3'b011:			SR1OUT = Out[3];
			3'b100:			SR1OUT = Out[4];
			3'b101:			SR1OUT = Out[5];
			3'b110:			SR1OUT = Out[6];
			3'b111:			SR1OUT = Out[7];
		endcase
		
		unique case (SR2)
			3'b000:			SR2OUT = Out[0];
			3'b001:			SR2OUT = Out[1];
			3'b010:			SR2OUT = Out[2];
			3'b011:			SR2OUT = Out[3];
			3'b100:			SR2OUT = Out[4];
			3'b101:			SR2OUT = Out[5];
			3'b110:			SR2OUT = Out[6];
			3'b111:			SR2OUT = Out[7];
		endcase
	end

		
endmodule
